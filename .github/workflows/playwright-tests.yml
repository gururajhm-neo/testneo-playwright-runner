name: Playwright Tests

on:
  push:
    branches: [ main, ci-run/* ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    timeout-minutes: 60
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libasound2t64 libatk-bridge2.0-0 libdrm2 libxkbcommon0 libxcomposite1 libxdamage1 libxrandr2 libgbm1 libxss1
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then
          echo "Installing from requirements.txt..."
          pip install -r requirements.txt
        else
          echo "No requirements.txt found, installing basic dependencies..."
          pip install playwright requests
        fi
        echo "Installed packages:"
        pip list | grep -E "(playwright|requests)"
    
    - name: Install Playwright browsers
      run: |
        python -m playwright install
        python -m playwright install-deps
    
    - name: Create required directories
      run: |
        mkdir -p test-results
        mkdir -p screenshots
        mkdir -p videos
    
    - name: Load environment variables
      run: |
        if [ -f .env ]; then
          cat .env >> $GITHUB_ENV
          echo "Environment variables loaded:"
          cat .env
        fi
    
    - name: Verify Python environment
      run: |
        echo "Python version:"
        python --version
        echo "Python path:"
        which python
        echo "Checking required modules:"
        python -c "import requests; print('✅ requests module available')"
        python -c "import playwright; print('✅ playwright module available')"
        python -c "import asyncio; print('✅ asyncio module available')"
    
    - name: Run Playwright tests
      run: |
        python runner.py
      continue-on-error: true
    
    - name: List generated files
      run: |
        echo "=== Generated files ==="
        find . -name "*.png" -o -name "*.json" -o -name "*.mp4" | head -20
        echo "=== Directory structure ==="
        ls -la
        ls -la test-results/ || echo "test-results directory is empty or doesn't exist"
        ls -la screenshots/ || echo "screenshots directory is empty or doesn't exist"
        ls -la videos/ || echo "videos directory is empty or doesn't exist"
    
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: |
          test-results/
          screenshots/
          videos/
          test_results.json
        retention-days: 7
    
    - name: Upload individual screenshots
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: screenshots
        path: "**/*.png"
        retention-days: 7 
